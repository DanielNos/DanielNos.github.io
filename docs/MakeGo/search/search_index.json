{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MakeGo MakeGo is a simple tool for compilation and packaging of Go projects. It uses a single TOML configuration file to automate the build process and package for all major Linux systems. Installation MakeGo can be downloaded as a binary or as a package from the Releases page. Installing Binary Linux Download the correct MakeGo binary for your system. Move the package to /usr/local/bin: mv [binary name] /usr/local/bin/makego Windows Download the correct MakeGo binary for your system. Move it to the folder where it should be installed. Open the Edit the system environment variables application. Go to the Advanced tab and click on the Environment Variables... button. Find the Path environment variable and click Edit . Click New and write the path to your installation folder to the new Field. Click OK . You may need to restart your terminal or system to apply this change. Installing Package Download the correct MakeGo package for your package manager. Install it using the package manager: APT : sudo apt install [package path] DNF : sudo dnf install [package path] PacMan : sudo pacman -S [package path] Quick Start Create a new configuration file: makego new Edit the make.toml file to suit your needs. Build your project: makego Commands Usage makego [action [argument]] [config file] Actions Default action is all . new [template] - Creates a new config from a template. Templates: normal, all, empty clean or cln - Removes all build and package directories. binary or bin - Builds project binaries. package or pkg - Builds project binaries and packages them. all - Does the same as package. help - Shows help. Flags --help or -h - Shows help. --version or -v - Shows version. --time or -t - Prints timestamps for log messages. new [template] - Creates a new config from a template. Templates: normal, all, empty. clean or cln - Removes all build and package directories. binary or bin - Builds project binaries. package or pkg - Builds project binaries and packages them. all - Does the same as package. help - Shows help. Config File This is how the default make.toml template looks: [application] name = \"app\" version = \"1.0.0\" description = \"My cool application.\" long_description = \"My cool application.\" url = \"https://github.com/Username/app\" license = \"\" [maintainer] name = \"Name Surname\" email = \"name.surname@email.com\" [build] target = \".\" flags = \"-ldflags=\\\"-w -s\\\"\" platforms = [ \"linux/amd64\", \"windows/amd64\", \"darwin/arm64\" ] [deb] package = false architectures = [ \"amd64\" ] [rpm] package = false build_src = true architectures = [ \"amd64\" ] [pkg] package = true architectures = [ \"amd64\" ] application Field Data Type Description name string The name of the application. version string The version of the application. Should be either X.X.X or X.X . description string A short description of your application. long_description string A long description of your application. Used only in RPM packages. url string The url of the main web page for your application. license string A short name of your project's license (MIT, AGPLv2, ...). Should not contain spaces. maintainer Field Data Type Description name string The name and surname of the project maintainer. email string The email address of the project maintainer. build Field Data Type Description target string Build target when running go build [target] . flags string Build flags. platforms string array Build platforms in format [GOOS]/[GOARCH] . List of all operating systems and architectures can be found on go.dev/doc . deb , rpm , pkg Field Data Type Description package bool Should the application be packaged for this packaging system. *build_src bool Should the source package be build. architectures string array Which architectures should be packaged. * Only in RPM config. How to Build Clone or download the repository . Build using MakeGo : Run makego Go : Run go get && go build -ldflags=\"-w -s\" .","title":"Documentation"},{"location":"#makego","text":"MakeGo is a simple tool for compilation and packaging of Go projects. It uses a single TOML configuration file to automate the build process and package for all major Linux systems.","title":"MakeGo"},{"location":"#installation","text":"MakeGo can be downloaded as a binary or as a package from the Releases page.","title":"Installation"},{"location":"#installing-binary","text":"","title":"Installing Binary"},{"location":"#linux","text":"Download the correct MakeGo binary for your system. Move the package to /usr/local/bin: mv [binary name] /usr/local/bin/makego","title":"Linux"},{"location":"#windows","text":"Download the correct MakeGo binary for your system. Move it to the folder where it should be installed. Open the Edit the system environment variables application. Go to the Advanced tab and click on the Environment Variables... button. Find the Path environment variable and click Edit . Click New and write the path to your installation folder to the new Field. Click OK . You may need to restart your terminal or system to apply this change.","title":"Windows"},{"location":"#installing-package","text":"Download the correct MakeGo package for your package manager. Install it using the package manager: APT : sudo apt install [package path] DNF : sudo dnf install [package path] PacMan : sudo pacman -S [package path]","title":"Installing Package"},{"location":"#quick-start","text":"Create a new configuration file: makego new Edit the make.toml file to suit your needs. Build your project: makego","title":"Quick Start"},{"location":"#commands","text":"","title":"Commands"},{"location":"#usage","text":"makego [action [argument]] [config file]","title":"Usage"},{"location":"#actions","text":"Default action is all . new [template] - Creates a new config from a template. Templates: normal, all, empty clean or cln - Removes all build and package directories. binary or bin - Builds project binaries. package or pkg - Builds project binaries and packages them. all - Does the same as package. help - Shows help.","title":"Actions"},{"location":"#flags","text":"--help or -h - Shows help. --version or -v - Shows version. --time or -t - Prints timestamps for log messages. new [template] - Creates a new config from a template. Templates: normal, all, empty. clean or cln - Removes all build and package directories. binary or bin - Builds project binaries. package or pkg - Builds project binaries and packages them. all - Does the same as package. help - Shows help.","title":"Flags"},{"location":"#config-file","text":"This is how the default make.toml template looks: [application] name = \"app\" version = \"1.0.0\" description = \"My cool application.\" long_description = \"My cool application.\" url = \"https://github.com/Username/app\" license = \"\" [maintainer] name = \"Name Surname\" email = \"name.surname@email.com\" [build] target = \".\" flags = \"-ldflags=\\\"-w -s\\\"\" platforms = [ \"linux/amd64\", \"windows/amd64\", \"darwin/arm64\" ] [deb] package = false architectures = [ \"amd64\" ] [rpm] package = false build_src = true architectures = [ \"amd64\" ] [pkg] package = true architectures = [ \"amd64\" ]","title":"Config File"},{"location":"#application","text":"Field Data Type Description name string The name of the application. version string The version of the application. Should be either X.X.X or X.X . description string A short description of your application. long_description string A long description of your application. Used only in RPM packages. url string The url of the main web page for your application. license string A short name of your project's license (MIT, AGPLv2, ...). Should not contain spaces.","title":"application"},{"location":"#maintainer","text":"Field Data Type Description name string The name and surname of the project maintainer. email string The email address of the project maintainer.","title":"maintainer"},{"location":"#build","text":"Field Data Type Description target string Build target when running go build [target] . flags string Build flags. platforms string array Build platforms in format [GOOS]/[GOARCH] . List of all operating systems and architectures can be found on go.dev/doc .","title":"build"},{"location":"#deb-rpm-pkg","text":"Field Data Type Description package bool Should the application be packaged for this packaging system. *build_src bool Should the source package be build. architectures string array Which architectures should be packaged. * Only in RPM config.","title":"deb, rpm, pkg"},{"location":"#how-to-build","text":"Clone or download the repository . Build using MakeGo : Run makego Go : Run go get && go build -ldflags=\"-w -s\" .","title":"How to Build"}]}